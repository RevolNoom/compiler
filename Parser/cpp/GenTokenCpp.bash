#!/usr/bin/bash
# GENERATE CLASSES IMPLEMENTATION 
# Called from GenEverything.bash

echo "/*"
echo "  THIS FILE IS GENERATED. ANY CHANGES WILL BE LOST"
echo "  GENERATED BY: $(realpath $0)"
echo "*/"
echo "#include \"Token.hpp\""
echo
echo "using namespace TokenType;"
echo

# Tokens with position as their only state
COMMON_TYPES=(Program Const Char Type Var Integer Array Of Function Procedure\
            Begin End Call If Then Else While Do For To Space Semicolon\
            Colon Period Comma Assign Equal Unequal Less LessEqual Greater\
            GreaterEqual Plus Minus Times Slash ParenthesisOpen ParenthesisClose\
            ArrayIndexOpen ArrayIndexClose)

for type in ${COMMON_TYPES[@]} 
do
    echo "shared_ptr<Token> $type::Clone(int line, int col) const"
    echo "{"
    echo "    return make_shared<$type>(line, col);"
    echo "}"
    echo

    echo "$type::$type(int line, int col): Token(line, col)"
    echo "{}"
    echo
done





# TOKENS THAT NEED SPECIAL TREATMENT

####
echo "string Identifier::ToString() const"
echo "{"
echo "    return _id;"
echo "}"
echo
echo "shared_ptr<Token> Identifier::Clone(int line, int col) const"
echo "{"
echo "    return make_shared<Identifier>(line, col, _id);"
echo "}"
echo
echo "Identifier::Identifier(int line, int col, string id): Token(line, col), _id(id)"
echo "{}"
echo

####
echo "string Number::ToString() const"
echo "{"
echo "    return to_string(_value);"
echo "}"
echo
echo "shared_ptr<Token> Number::Clone(int line, int col) const"
echo "{"
echo "    return make_shared<Number>(line, col, _value);"
echo "}"
echo
echo "Number::Number(int line, int col, int value): Token(line, col), _value(value)"
echo "{}"
echo


####
echo "string Letter::ToString() const"
echo "{"
echo "    auto result = string(\"\'x\'\");"
echo "    result[1]=_charcode;"
echo "    return result;"
echo "}"
echo
echo "shared_ptr<Token> Letter::Clone(int line, int col) const"
echo "{"
echo "    return make_shared<Letter>(line, col, _charcode);"
echo "}"
echo
echo "Letter::Letter(int line, int col, int charcode): Token(line, col), _charcode(charcode)"
echo "{}"
echo