/*
  THIS FILE IS GENERATED. ANY CHANGES WILL BE LOST
  GENERATED BY: /home/rev/Memory/Knowledge/Compiler/Lab/Parser/cpp/GenTokenHpp.bash

  PROTOTYPE + VISITOR
  A uniform interface of all KPL token 
*/
#ifndef TOKEN_HPP
#define TOKEN_HPP

#include <list>
#include <memory>
#include <string>

using namespace std;

namespace TokenType
{
    class Token;
}

using TokenStream = list<shared_ptr<TokenType::Token>>;

namespace TokenType
{
	class Token
	{
	public:

	    int GetCol()  {return _col;}
	    int GetLine() {return _line;}

	    virtual string GetTokenType() const = 0;

	    // PROTOTYPE
	    // Return a new token of current type on the specified line and column 
	    virtual shared_ptr<Token> Clone(int line, int col) const = 0;

	protected:
	    Token(int line, int col):_line(line), _col(col)
	    {
	    }

	private:
	    int _line, _col;
	};




	class Program: public Token
	{
	public:
	  string GetTokenType() const override	{return "Program";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Program(int line, int col);
	};

	class Const: public Token
	{
	public:
	  string GetTokenType() const override	{return "Const";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Const(int line, int col);
	};

	class Type: public Token
	{
	public:
	  string GetTokenType() const override	{return "Type";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Type(int line, int col);
	};

	class Var: public Token
	{
	public:
	  string GetTokenType() const override	{return "Var";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Var(int line, int col);
	};

	class Char: public Token
	{
	public:
	  string GetTokenType() const override	{return "Char";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Char(int line, int col);
	};

	class Integer: public Token
	{
	public:
	  string GetTokenType() const override	{return "Integer";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Integer(int line, int col);
	};

	class Array: public Token
	{
	public:
	  string GetTokenType() const override	{return "Array";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Array(int line, int col);
	};

	class Of: public Token
	{
	public:
	  string GetTokenType() const override	{return "Of";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Of(int line, int col);
	};

	class Function: public Token
	{
	public:
	  string GetTokenType() const override	{return "Function";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Function(int line, int col);
	};

	class Procedure: public Token
	{
	public:
	  string GetTokenType() const override	{return "Procedure";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Procedure(int line, int col);
	};

	class Begin: public Token
	{
	public:
	  string GetTokenType() const override	{return "Begin";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Begin(int line, int col);
	};

	class End: public Token
	{
	public:
	  string GetTokenType() const override	{return "End";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      End(int line, int col);
	};

	class Call: public Token
	{
	public:
	  string GetTokenType() const override	{return "Call";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Call(int line, int col);
	};

	class If: public Token
	{
	public:
	  string GetTokenType() const override	{return "If";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      If(int line, int col);
	};

	class Then: public Token
	{
	public:
	  string GetTokenType() const override	{return "Then";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Then(int line, int col);
	};

	class Else: public Token
	{
	public:
	  string GetTokenType() const override	{return "Else";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Else(int line, int col);
	};

	class While: public Token
	{
	public:
	  string GetTokenType() const override	{return "While";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      While(int line, int col);
	};

	class Do: public Token
	{
	public:
	  string GetTokenType() const override	{return "Do";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Do(int line, int col);
	};

	class For: public Token
	{
	public:
	  string GetTokenType() const override	{return "For";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      For(int line, int col);
	};

	class To: public Token
	{
	public:
	  string GetTokenType() const override	{return "To";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      To(int line, int col);
	};

	class Space: public Token
	{
	public:
	  string GetTokenType() const override	{return "Space";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Space(int line, int col);
	};

	class Semicolon: public Token
	{
	public:
	  string GetTokenType() const override	{return "Semicolon";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Semicolon(int line, int col);
	};

	class Colon: public Token
	{
	public:
	  string GetTokenType() const override	{return "Colon";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Colon(int line, int col);
	};

	class Period: public Token
	{
	public:
	  string GetTokenType() const override	{return "Period";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Period(int line, int col);
	};

	class Comma: public Token
	{
	public:
	  string GetTokenType() const override	{return "Comma";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Comma(int line, int col);
	};

	class Assign: public Token
	{
	public:
	  string GetTokenType() const override	{return "Assign";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Assign(int line, int col);
	};

	class Equal: public Token
	{
	public:
	  string GetTokenType() const override	{return "Equal";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Equal(int line, int col);
	};

	class Unequal: public Token
	{
	public:
	  string GetTokenType() const override	{return "Unequal";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Unequal(int line, int col);
	};

	class Less: public Token
	{
	public:
	  string GetTokenType() const override	{return "Less";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Less(int line, int col);
	};

	class LessEqual: public Token
	{
	public:
	  string GetTokenType() const override	{return "LessEqual";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      LessEqual(int line, int col);
	};

	class Greater: public Token
	{
	public:
	  string GetTokenType() const override	{return "Greater";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Greater(int line, int col);
	};

	class GreaterEqual: public Token
	{
	public:
	  string GetTokenType() const override	{return "GreaterEqual";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      GreaterEqual(int line, int col);
	};

	class Plus: public Token
	{
	public:
	  string GetTokenType() const override	{return "Plus";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Plus(int line, int col);
	};

	class Minus: public Token
	{
	public:
	  string GetTokenType() const override	{return "Minus";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Minus(int line, int col);
	};

	class Times: public Token
	{
	public:
	  string GetTokenType() const override	{return "Times";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Times(int line, int col);
	};

	class Slash: public Token
	{
	public:
	  string GetTokenType() const override	{return "Slash";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      Slash(int line, int col);
	};

	class ParenthesisOpen: public Token
	{
	public:
	  string GetTokenType() const override	{return "ParenthesisOpen";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      ParenthesisOpen(int line, int col);
	};

	class ParenthesisClose: public Token
	{
	public:
	  string GetTokenType() const override	{return "ParenthesisClose";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      ParenthesisClose(int line, int col);
	};

	class ArrayIndexOpen: public Token
	{
	public:
	  string GetTokenType() const override	{return "ArrayIndexOpen";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      ArrayIndexOpen(int line, int col);
	};

	class ArrayIndexClose: public Token
	{
	public:
	  string GetTokenType() const override	{return "ArrayIndexClose";}
      virtual shared_ptr<Token> Clone(int line, int col) const override;
      ArrayIndexClose(int line, int col);
	};

	class Identifier: public Token
	{
	public:
	  string GetTokenType() const override	{return "Identifier";}
	  string ToString() const;
	  virtual shared_ptr<Token> Clone(int line, int col) const;
	  Identifier(int line, int col, string id);

	private:
	  string _id;
	};

	class Number: public Token
	{
	public:
	  string GetTokenType() const override	{return "Number";}
	  string ToString() const;
	  virtual shared_ptr<Token> Clone(int line, int col) const;
	  Number(int line, int col, int value);

	private:
      int _value;
	};

	class Letter: public Token
	{
	public:
	  string GetTokenType() const override	{return "Letter";}
	  string ToString() const;
	  virtual shared_ptr<Token> Clone(int line, int col) const;
	  Letter(int line, int col, int charcode);

	private:
      int _charcode;
	};

} /*namespace Token*/

#endif /*TOKEN_HPP*/
